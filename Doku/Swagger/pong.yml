openapi: 3.0.3
info:
  title: Trash Pong API
  description: |-
    Trashpong ist eine moderne Neuinterpretation des klassischen Pong-Spiels, das auf einer Client-Server-Architektur basiert. Der Server ist in Node.js implementiert und verwendet eine PostgreSQL-Datenbank zur Speicherung von Spielerdaten und Spielständen. Die Kommunikation zwischen Client und Server erfolgt über eine REST API und Websockets, um Echtzeit-Interaktionen zu ermöglichen.
  contact:
    email: aronseidl17@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000/
tags:
  - name: health
    description: Gibt Informationen zur Health
  - name: api
    description: CRUD REST API, um Daten zu verwalten
  - name: user
    description: Nutzerfunktionen

paths:
  /health/ping:
    get:
      tags:
        - health
      summary: Zum Testen der Verbindung zur API
      responses:
        '200':
          description: 'Verbindung steht'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Verbindung zur API steht'
        '500':
          description: Fehler bei der Verbindung und in der API
  /health/db:
    get:
      tags:
        - health
      summary: Prüft, ob die Datenbank funktioniert
      responses:
        '200':
          description: 'API konnte eine Verbindung zur Datenbank herstellen'
          content:
            application/text:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'OK'
        '500':
          description: Connection error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'No connection to the Grafana server'
  /api/room:
    get:
      tags:
        - api
      summary: Alle Räume abrufen
      description: Dieser Endpunkt gibt alle Räume zurück.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Alle Räume wurden zurückgegeben'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          description: Keine Authentifizierung über Bearer Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Bitte authentifizieren'
  /api/room/{id}:
    get:
      tags:
        - api
      summary: Einen bestimmten Raum abrufen
      description: Dieser Endpunkt gibt einen bestimmten Raum anhand seiner ID zurück.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Raum ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Raum wurde zurückgegeben'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: 'Raum nicht gefunden'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Nicht gefunden'
        '500':
          description: 'API-Fehler'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Interner Serverfehler'
  /api/room/:
    post:
      tags:
        - api
      summary: Einen neuen Raum erstellen
      description: Dieser Endpunkt erstellt einen neuen Raum.
      security:
        - bearerAuth: []
      requestBody:
        description: Daten zum Erstellen eines neuen Raums
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Raumtitel
                  example: "Privater Raum 1"
                pw:
                  type: string
                  description: Passwort für den Raum (erforderlich, wenn der Raum privat ist)
                  example: "geheim"
                oeffentlich:
                  type: boolean
                  description: Gibt an, ob der Raum öffentlich ist
                  example: false
      responses:
        '201':
          description: Raum erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Ungültige Eingabe
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "title ist erforderlich und Raumstatus ist erforderlich"
        '401':
          description: Fehlende oder ungültige Authentifizierung
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Autorisierungsheader fehlt"
        '500':
          description: Interner Fehler
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Interner Serverfehler"
  /user/login:
    post:
      tags:
        - user
      summary: Einen neuen Benutzer registrieren
      description: Dieser Endpunkt registriert einen neuen Benutzer und gibt ein Bearer Token zurück, um weitere Anfragen zu authentifizieren.
      requestBody:
        description: Daten zur Registrierung
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Registrierung erfolgreich
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Daten erfolgreich eingefügt'
        '400':
          description: Ungültige Eingabe
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Ungültige Anfrage'
        '500':
          description: Interner Fehler
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Zugriffstoken fehlt oder ist ungültig
  schemas:
    User:
      required:
        - username
      type: object
      properties:
        username:
          type: string
          example: "Thomas Kircher"
    Room:
      required:
        - title
        - oeffentlich
      type: object
      properties:
        raum_id:
          type: integer
          example: 3
        titel:
          type: string
          example: "Privater Raum 1"
        user_id1:
          type: integer
          example: 5
        user_id2:
          type: integer
          example: 1
        öffentlich:
          type: boolean
          example: false
        passwort:
          type: string
          example: "geheim"
        user1:
          type: string
          example: "GustavHauser"
        user2:
          type: string
          example: "Thomas"
        Spielstand:
          type: object
          properties:
            punkte_spieler1:
              type: integer
              example: 10
            punkte_spieler2:
              type: integer
              example: 8