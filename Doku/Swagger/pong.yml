openapi: 3.0.3
info:
  title: DHBW-Blickbox API
  description: |-

    Die API stellt eine Schnittstelle zwischen der DHBW-Blickbox und dem Externen Server bereit. Mit ihr ist es möglich Messdaten in die Datenbank zu schreiben, sowie zu checken ob die Systeme miterinander Verbunden sind und funktionieren.
      Der Code ist im [DHBW-Blickbox Repo](https://github.com/mxmueller/DHBW-Blickbox) zu finden.


  contact:
    email: aronseidl17@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000/
tags:
  - name: health
    description: Gibt informationen zur health
  - name: api
    description: CRUD REST API um Daten zu verwalten
  - name: user
    description: Nutzerfunktionen

paths:
  /ping:
    get:
      tags:
        - health
      summary: Zum testen der Verbindung zur API
      responses:
        '200':
          description: 'Verbindung steht'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Verbindung zur API steht'
        '500':
          description: Fehler bei der Verbindung und in der API
  /db:
    get:
      tags:
        - health
      summary: Checkt ob die Datenbank funktioniert
      responses:
        '200':
          description: 'API konnte eine Verbindung zur Datenbank herstellen'
          content:
            application/text:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'OK'
        '500':
          description: Fehler bei der Verbindung
          content:
            application/json:
              schema:
                type: object
                properties:
                  Fehler:
                    type: string
                    example: 'Keine Verbindung zum Grafana Server'
  /room:
    get:
      tags:
        - api
      summary: Checkt ob die Blickbox mit dem Internet verbunden ist.
      security:
        - bearerAuth: []         # use the same name as above
      responses:
        '200':
          description: 'Alle Räume werden ausgegeben'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'raum_id: 3
                              spieler_id1: 5
                              spieler_id2: 1
                              Öffentlich: false
                              passwort: null
                              titel: Private Room 1
                              '

        '401':
          description: Keine Authentikation über Bearer Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  Fehler:
                    type: string
                    example: 'Please authenticate'

  /room/{id}:
    get:
      tags:
        - api
      summary: Frägt einen speziellen Raum ab
      security:
        - bearerAuth: []         # use the same name as above
      parameters:
        - name: id
          in: path
          description: Room id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Raum wird zurückgegeben'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'raum_id: 3
                              spieler_id1: 5
                              spieler_id2: 1
                              Öffentlich: false
                              passwort: null
                              titel: Private Room 1
                              '
        '404':
          description: 'Raum exestiert nicht'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Not Found'
        '500':
          description: 'API failed'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'IP-Adresse der BlickBox geupdatet. Neue IP: {ip_adress}'
  /login:
    post:
      tags:
        - user
      summary: Ein neuen Temperatur Wert hinzufügen
      description: Füg einen neuen Temperatur Wert hinzu.
      requestBody:
        description: Erstelle einen neuen Temperatur Wert
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Anmeldung erfolgreich
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Daten erfolgreich eingefügt'

        '400':
          description: Falscher Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Bad Request'
        '500':
          description: Interner Fehler

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    User:
      required:
        - username
      type: object
      properties:
        username:
          type: string
          example: "Thomas Kircher"
