@startuml
title player login
actor player
box "user services"
collections "api service" as ps
participant "auth.ts" as sess
participant "user.ts" as usr 
end box
database database as db

player -> ps: /user/login\nbody: {"username": name}
activate ps
ps -> usr: getUserByName(name)
activate usr
usr -> db: select name, uuid from users where name is name
activate db
db -> usr: user_names[]
note right of usr: Der Nutzer wird von einem \n Array aus Attributen in ein Array\n mit User Objekten umgewandelt
deactivate db
usr -> ps: user_names[User(user_id, name)]
deactivate usr

alt user_names.length >= 1
    note right of ps: Der Nutzer existiert bereits und\nmuss nicht erneut in der Datenbank\nregistriert werden.\nEin JWT Token wird \nangelegt mit dem sich der Nutzer authentifiziert kann.
    ps -> sess: generateAccessToken(user)
    activate sess
    sess -> ps: token
    deactivate sess
    ps -> usr: registerAuthtoken(user.user_id, token)
    activate usr
    usr -> db: UPDATE "user" SET token = $1 WHERE user_id = $2;
    activate db
    db -> usr: success
    deactivate db
    usr -> ps: success
    deactivate usr
    alt success == true
        ps -> player: token
        player <-- ps: 200 OK
    else
        ps -> player: ThrowHTTPException(500)
    end
else
    ps -> usr: registerUser(user_name)
    activate usr
    usr -> db: insert (name) values (user_name) into users
    activate db
    db -> usr: user_name, user_uuid
    deactivate db
    usr -> ps: user_name, user_uuid
    deactivate usr
    ps -> sess: generateAccessToken(user)
    activate sess
    sess -> ps: token
    deactivate sess
    ps -> usr: registerAuthtoken(user.user_id, token)
    activate usr
    usr -> db: UPDATE "user" SET token = $1 WHERE user_id = $2;
    activate db
    db -> usr: success
    deactivate db
    usr -> ps: success
    deactivate usr
    ps -> player: token
    player <-- ps: 200 OK
end

@enduml