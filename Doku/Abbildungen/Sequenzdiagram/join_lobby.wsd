@startuml
title "join lobby"
actor player
skinparam defaultFontSize 30
skinparam componentFontSize 30
skinparam actorFontSize 30
skinparam noteFontSize 30
skinparam sequenceParticipantFontSize 30
skinparam sequenceMessageFontSize 30
skinparam titleFontSize 30
box "game socket.io server" #LightBlue
participant "socket.io" as ws
collections "joinRoom" as jR
end box
box "user api" #LightYellow
participant "raum.ts" as raum
collections "auth.ts" as auth
end box
database database as db

note right of player: Das JWT-Token wird entweder während des Handshakes gesetzt\noder durch Setzen eines Headers vor dem Herstellen der Verbindung.\nHeader-Struktur:\n authorization: <token>
player -> ws: connect()
activate ws
player -> jR: joinRoom(roomId)
activate jR
jR -> ws: getToken(ws)
activate ws
ws -> jR: token
deactivate ws
jR -> auth: decodeAccessToken(token)
activate auth
auth -> jR: UserToken(type, username, user_id)
deactivate auth
alt if token is invalid
    jR -> ws: ThrowEror('Ungültiges Token')
    deactivate jR
    ws -> player: error('Ungültiges Token')
    deactivate ws
     
end

jR -> raum: getRoom(roomId)

activate raum
activate jR
raum -> db: SELECT r.*, s.name AS user1, sp.name AS user2 FROM\n Raum r LEFT JOIN "user" s \n ON s.user_id = r.user_id1 \n LEFT JOIN "user" sp ON sp.user_id = r.user_id2 \n WHERE r.raum_id = roomId LIMIT 1;
activate db
db -> raum: room
deactivate db
raum -> jR: room
deactivate raum
alt if room does not exist
    jR -> player: error('Raum existiert nicht')
    deactivate raum
    deactivate ws
     
end
deactivate raum

alt if room is full
    jR -> player: error('Raum ist voll')
    deactivate ws
     
end

alt if player is not room creator
    note right of jR: Überprüfen, ob der Spieler der Raumersteller ist.\nDer Raumbeitritt sollte nur ausgeführt werden, wenn der Benutzer der zweite Spieler ist.\nDer erste Benutzer wird in der Datenbank gesetzt, wenn der Raum erstellt wird.
    jR -> raum: joinRoom\n(undefined,\n player.user_id,\n roomId)
    activate raum
    alt if both user_id1 and user_id2 are defined
        raum -> db: UPDATE Raum \nSET user_id1 = user_id1,\nuser_id2 = player.user_id\n WHERE raum_id = roomId  RET *
        activate db
    else if only user_id1 is defined
        raum -> db: UPDATE Raum \nSET user_id1 = user_id1\nWHERE raum_id = roomId  RET *
    else if only user_id2 is defined
        raum -> db: UPDATE Raum \nSET user_id2 = player.user_id\nWHERE raum_id = roomId  RET     *
    else
        raum -> jR: null
         
    end
    db -> raum: room
    deactivate db
    raum -> jR: Raum(\nraum_id,\n titel,\n user_id1,\n user_id2,\nöffentlich,\n passwort,\n user1,\n user2)
    deactivate raum
end
note right of jR: Socket.io-Raum mit einer gültigen Raum-ID beitreten
jR -> ws: join(Raum.raum_id.\ntoString())
activate ws
note right of jR: Eine Benachrichtigung an alle Clients im Raum senden
jR -> ws: to\n(roomId.toString())\n.emit(\n'notification', \n`${player.name}\n hat den Raum betreten`)
deactivate ws

@enduml